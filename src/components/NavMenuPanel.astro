---
import type { NavBarLink } from "types/navBar";
import { Icon } from "astro-icon/components";

interface Props {
  links: NavBarLink[];
}

const links = Astro.props.links;
---

<div
  id="nav-menu-panel"
  class:list={[
    "float-panel closed absolute transition-all fixed right-4 px-2 py-2",
  ]}
  aria-hidden="true"
>
  {
    links.map((link) => (
      <a
        href={link.url}
        class="group flex justify-between items-center py-2 pl-3 pr-1 rounded-lg gap-8
            hover:bg-[var(--btn-plain-bg-hover)] active:bg-[var(--btn-plain-bg-active)] transition
        "
        target={link.external ? "_blank" : null}
        rel={link.external ? "noopener noreferrer" : null}
        tabindex="-1"
      >
        <div class="transition text-black/75 dark:text-white/75 font-bold group-hover:text-[var(--primary)] group-active:text-[var(--primary)]">
          {link.name}
        </div>
        <Icon
          name={
            link.external
              ? "fa6-solid:arrow-up-right-from-square"
              : "material-symbols:chevron-right-rounded"
          }
          class={
            link.external
              ? "transition text-black/25 dark:text-white/25 -translate-x-1"
              : "transition text-[var(--primary)]"
          }
          size={link.external ? 12 : 20}
        />
      </a>
    ))
  }
</div>

<script>
  import { setClickOutsideToClose } from "utils";

  setClickOutsideToClose("nav-menu-panel", [
    "nav-menu-panel",
    "nav-menu-switch",
  ]);

  const navMenuLinks = document.querySelectorAll("#nav-menu-panel a");

  navMenuLinks.forEach((link) => {
    link.addEventListener("click", () => {
      document.getElementById("nav-menu-panel")?.classList.add("closed");
    });

    link.addEventListener("keydown", (e) => {
      const event = e as KeyboardEvent;
      if (event.key === "ArrowDown") {
        event.preventDefault();
        const nextLink = link.nextElementSibling as HTMLAnchorElement;
        if (nextLink) {
          nextLink.focus();
        }
      }

      if (event.key === "ArrowUp") {
        event.preventDefault();
        const prevLink = link.previousElementSibling as HTMLAnchorElement;
        if (prevLink) {
          prevLink.focus();
        }
      }
    });
  });
</script>
