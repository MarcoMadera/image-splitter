---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Image Splitter">
  <div class="flex flex-col h-screen">
    <div class="mt-44 space-y-16 text-center">
      <div class="relative z-10 mb-16">
        <h1
          class="text-2xl font-bold text-white sm:text-3xl md:text-4xl mb-3 mx-auto max-w-md"
        >
          Image Splitter
        </h1>
        <div class="flex flex-col items-center justify-center">
          <label class="text-white">
            Grid X
            <input
              type="number"
              placeholder="Grid X"
              id="gridX"
              class="border border-gray-300 rounded-md p-2 mb-2 text-black"
              value="3"
              min="2"
            />
          </label>
          <label class="text-white">
            Grid Y
            <input
              type="number"
              placeholder="Grid Y"
              id="gridY"
              class="border border-gray-300 rounded-md p-2 mb-2 text-black"
              value="3"
              min="2"
            />
          </label>
          <input
            type="file"
            id="imageInput"
            class="border border-gray-300 rounded-md p-2 mb-2"
          />
          <button
            id="downloadButton"
            disabled
            class="tabbable px-4 py-3 bg-buttons-purple hover:bg-buttons-purpleHover text-white cursor-pointer inline-flex items-center justify-center rounded-lg font-medium transition-[transform,background-color] duration-100 active:scale-105 md:px-6 disabled:!cursor-not-allowed disabled:bg-opacity-60 disabled:text-opacity-60"
            >Download
          </button>
          <div id="imageContainer" class="mt-4 max-w-3xl w-full relative"></div>
        </div>
      </div>
    </div>
  </div>

  <script>
    import {
      getSplitImages,
      downloadSplitImage,
      removeFileExtension,
      getFileNameExtension,
    } from "utils/image-splitter";
    import type { IUploadedImageState } from "types/image-splitter";

    const gridXInput = document.getElementById("gridX") as HTMLInputElement;
    const gridYInput = document.getElementById("gridY") as HTMLInputElement;
    const imageInput = document.getElementById("imageInput");
    const downloadButton = document.getElementById("downloadButton");
    const imageContainer = document.getElementById("imageContainer");

    if (!gridXInput || !gridYInput || !imageInput || !downloadButton) {
      throw new Error("Element not found");
    }

    let splitImages: HTMLCanvasElement[] = [];

    const uploadedImageStateHandler = {
      set: <T extends keyof IUploadedImageState>(
        state: IUploadedImageState,
        prop: T,
        value: IUploadedImageState[T]
      ): boolean => {
        state[prop] = value;

        if (prop === "file") {
          const file = value as IUploadedImageState["file"];
          state.name = removeFileExtension(file?.name);
          state.extension = getFileNameExtension(file?.name);

          if (!file && imageContainer) {
            imageContainer.innerHTML = "";
          }

          toggleDownloadButton(!file);
        }

        return true;
      },
    };

    const uploadedImageState = new Proxy<IUploadedImageState>(
      { file: null, name: "", extension: "" },
      uploadedImageStateHandler
    );

    function toggleDownloadButton(disabled?: boolean) {
      if (disabled) {
        downloadButton?.setAttribute("disabled", "");
      } else {
        downloadButton?.removeAttribute("disabled");
      }
    }

    async function handleChangeImage(e: Event) {
      const gridX = Number(gridXInput.value);
      const gridY = Number(gridYInput.value);
      uploadedImageState.file =
        (e.target as HTMLInputElement)?.files?.[0] ?? uploadedImageState.file;

      try {
        splitImages = await getSplitImages({
          uploadedImageState,
          gridX,
          gridY,
          target: "#imageContainer",
        });
      } catch (error) {
        // TODO: Implement notification
        uploadedImageState.file = null;
        console.error(error);
      }
    }

    async function handleDownload() {
      const gridX = Number(gridXInput.value);
      const gridY = Number(gridYInput.value);
      const outputName = `${uploadedImageState.name}_grid_${gridX}x${gridY}`;

      try {
        await downloadSplitImage({ outputName, splitImages });
      } catch (error) {
        // TODO: Implement notification
        console.error(error);
      }
    }

    gridXInput.addEventListener("change", handleChangeImage);
    gridYInput.addEventListener("change", handleChangeImage);
    imageInput.addEventListener("change", handleChangeImage);
    downloadButton.addEventListener("click", handleDownload);
  </script>
</Layout>
